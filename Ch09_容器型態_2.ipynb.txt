{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "colab": {
      "name": "Ch09_容器型態_2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "syoJ7mKJGrPe"
      },
      "source": [
        "## 序對 (tuple)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s3q7cRU9GrPk"
      },
      "source": [
        "t = (\"a\", \"b\", \"mary\", \"john\", \"a\", \"mary\", \"a\", \"b\")\n",
        "print(t.index(\"a\"))\n",
        "print(t.index(\"a\",1,5))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "30W1OnaPGrPl"
      },
      "source": [
        "print(t.count(\"mary\"))\n",
        "print(t.count(\"b\"))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J3Xa-pQtGrPl"
      },
      "source": [
        "tup = (3, False, \"XYZ\")\n",
        "tup = a,b,c\n",
        "print(a)\n",
        "print(b)\n",
        "print(c)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pd971do3GrPm"
      },
      "source": [
        "a,b,c = tup\n",
        "print(a)\n",
        "print(b)\n",
        "print(c)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SRB6WaDKGrPm"
      },
      "source": [
        "a, *b = (1, 3, 5, 7, 9)\n",
        "print(a)\n",
        "print(b)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bncUlgpJGrPm"
      },
      "source": [
        "x, *y, z = (2, 4, 6, 8, 10)\n",
        "print(x)\n",
        "print(y)\n",
        "print(z)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4XVe7oN-GrPm"
      },
      "source": [
        "## 集合 (set)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jpn0zhzMGrPn"
      },
      "source": [
        "continents = {\"California\",\"New York\"}\n",
        "cities = {\"New York\",\"Phoenix\",\"Chicago\"}\n",
        "print(continents,\"\\n\",cities,\"\\n\",sep=\"\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "clfB38sYGrPn"
      },
      "source": [
        "continents.clear()\n",
        "print(continents)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NtJCvz0ZGrPn"
      },
      "source": [
        "continents.add(\"Texas\")\n",
        "continents.add(\"California\")\n",
        "continents.add(\"New York\")\n",
        "print(continents)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lZ_WGWncGrPn"
      },
      "source": [
        "cities.remove(\"Chicago\")\n",
        "print(cities,\"\\n\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DgU4cAdiGrPo"
      },
      "source": [
        "continents.discard(\"California\")\n",
        "print(continents,\"\\n\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LF3XGqTcGrPo"
      },
      "source": [
        "print(cities.union(continents))\n",
        "print(cities)\n",
        "cities.update(continents)\n",
        "print(cities)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uyx1grWGtq_6"
      },
      "source": [
        "cities = {'New York', 'Phoenix'}\n",
        "print(cities.difference(continents))\n",
        "print(cities)\n",
        "cities.difference_update(continents)\n",
        "print(cities)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yimszYocGrPp"
      },
      "source": [
        "s1 = frozenset({1,2,3,4})\n",
        "print(s1, type(s1))\n",
        "s2 = {1,2}\n",
        "s3 = s1 - s2\n",
        "print(s3, type(s3))\n",
        "print(s1)\n",
        "s1.add(6)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wVj87mU2GrPp"
      },
      "source": [
        "## 字典 (dict)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2GfehysDGrPp"
      },
      "source": [
        "d = dict(zip((1,2,3),(\"a\",\"b\",\"c\")))\n",
        "print(type(d))\n",
        "print(d[3])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "d[4] = \"d\"\n",
        "print(d)"
      ],
      "metadata": {
        "id": "rpGx-s4shh-s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del d[1]\n",
        "print(d)"
      ],
      "metadata": {
        "id": "TeQSmhYohjkI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kRJhnuVVGrPp"
      },
      "source": [
        "mydict = {\"a\":1, \"b\":2, \"c\":3}\n",
        "mydict_new = {}\n",
        "for key,value in mydict.items():\n",
        "    mydict_new[value] = key\n",
        "print(mydict_new)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JLnL44HIGrPq"
      },
      "source": [
        "mydict = {\"a\":1, \"b\":2, \"c\":3}\n",
        "mydict_new = dict((value,key) for key,value in mydict.items())\n",
        "print(mydict_new)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y9Xx3DKVGrPq"
      },
      "source": [
        "mydict = {\"a\":1, \"b\":2, \"c\":3}\n",
        "mydict_new = dict(zip(mydict.values(),mydict.keys()))\n",
        "print(mydict_new)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J9XMGlmMhPXy"
      },
      "source": [
        "## 闖關試題：猜拳模擬（APCS實作題）\n",
        "有一個機器人跟真人玩 N 次猜拳，<br />\n",
        "真人在第 i 輪出的拳為 yi (0：石頭；2：剪刀；5：布)，<br />\n",
        "機器人第一次會出的拳為 F，接下來出拳的方式如下：<br />\n",
        "如果前兩輪真人出的拳皆相同，則電腦這輪會出可以打敗前兩輪的拳；<br />\n",
        "否則，電腦會出與前一輪真人一樣的拳。<br />\n",
        "請輸出第 k 輪時會分出勝負，或 N 輪雙方都平手。\n",
        "\n",
        "輸入格式：<br />\n",
        "F<br />\n",
        "N<br />\n",
        "y1 y2 ... yN<br />\n",
        "輸出格式：<br />\n",
        "c1 c2 ... ck : Drew at round N/Won at round k/Lost at round k\n",
        "\n",
        "輸入 1:&emsp;&emsp;&emsp;輸出 1:<br />\n",
        "0&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;0 : Won at round 1<br />\n",
        "4<br />\n",
        "2&ensp;5&ensp;0&ensp;2<br />\n",
        "\n",
        "輸入 2:&emsp;&emsp;&emsp;輸出 2:<br />\n",
        "2&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;2&ensp;2 : Lost at round 2<br />\n",
        "2<br />\n",
        "2&ensp;0<br />\n",
        "\n",
        "輸入 3:&emsp;&emsp;&emsp;輸出 3:<br />\n",
        "5&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;5&ensp;5&ensp;2 : Lost at round 3<br />\n",
        "4<br />\n",
        "5&ensp;5&ensp;0&ensp;0\n",
        "\n",
        "輸入 4:&emsp;&emsp;&emsp;輸出 4:<br />\n",
        "5&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;5&ensp;5&ensp;2&ensp;2&ensp;0&ensp;0 : Drew at round 6<br />\n",
        "6<br />\n",
        "5&ensp;5&ensp;2&ensp;2&ensp;0&ensp;0"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2RpvZDMVQk-e"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}